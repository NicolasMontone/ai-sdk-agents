{
  "author": "https://nicolasmontone.com",
  "name": "vercel",
  "type": "registry:lib",
  "description": "Vercel platform integration tools for deployment and project management. Enables interaction with Vercel services for managing deployments, domains, and project configurations.",
  "dependencies": [
    "zod",
    "ai",
    "@vercel/sdk"
  ],
  "files": [
    {
      "path": "lib/tools/vercel.ts",
      "type": "registry:lib",
      "content": "import { tool, type Tool } from 'ai'\nimport { z } from 'zod'\nimport { Vercel } from '@vercel/sdk'\n\ntype VercelTools = 'searchProjects' | 'searchDeployments' | 'searchDomains'\n\nconst tokenSchema = z.string().describe('The Vercel API token').min(24)\n\nexport const vercelTools = (\n  { token }: { token: string },\n  config?: { excludeTools?: VercelTools[] }\n): Partial<Record<VercelTools, Tool>> => {\n  const tokenParsed = tokenSchema.safeParse(token)\n  if (!tokenParsed.success) {\n    throw new Error('Invalid Vercel API token')\n  }\n  const client = new Vercel({ bearerToken: token })\n  const tools: Partial<Record<VercelTools, Tool>> = {\n    searchProjects: tool({\n      description: 'Search for projects in Vercel',\n      parameters: z.object({}),\n      execute: async () => {\n        const response = await searchProjects(client)\n        return response\n      },\n    }),\n    searchDeployments: tool({\n      description: 'Search for deployments in Vercel',\n      parameters: z.object({\n        query: z.string().describe('The search query to find deployments'),\n      }),\n      execute: async ({ query }) => {\n        const response = await searchDeployments(client, query)\n        return response\n      },\n    }),\n    searchDomains: tool({\n      description: 'Search for domains in Vercel',\n      parameters: z.object({}),\n      execute: async () => {\n        const response = await searchDomains(client)\n        return response\n      },\n    }),\n  }\n\n  for (const toolName in tools) {\n    if (config?.excludeTools?.includes(toolName as VercelTools)) {\n      delete tools[toolName as VercelTools]\n    }\n  }\n\n  return tools\n}\n\nasync function searchProjects(client: Vercel) {\n  return client.projects.getProjects({\n    limit: '20',\n  })\n}\n\nasync function searchDeployments(client: Vercel, query: string) {\n  return client.deployments.getDeployments({\n    limit: 20,\n    projectId: query,\n  })\n}\n\nasync function searchDomains(client: Vercel) {\n  return client.domains.getDomains({\n    limit: 20,\n  })\n}\n",
      "target": ""
    }
  ]
}