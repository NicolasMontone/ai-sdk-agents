{
  "author": "https://nicolasmontone.com",
  "name": "discord",
  "type": "registry:lib",
  "description": "Discord integration tools for sending messages, managing channels, and handling message history. Includes features for sending messages, retrieving channel history, managing channels, and message operations with full Discord markdown support.",
  "dependencies": [
    "zod",
    "ai"
  ],
  "files": [
    {
      "path": "lib/tools/discord.ts",
      "type": "registry:lib",
      "content": "import { tool, type Tool } from 'ai'\nimport { z } from 'zod'\n\ntype DiscordTools =\n  | 'sendMessage'\n  | 'getChannelInfo'\n  | 'listChannels'\n  | 'getChannelMessages'\n  | 'deleteMessage'\n\ninterface DiscordResponse {\n  data?: unknown\n  error?: string\n}\n\n/**\n * Make a request to Discord API.\n * @param url The full URL to make the request to\n * @param options Request options including method, headers, and body\n * @returns A promise that resolves to a DiscordResponse\n */\nasync function makeRequest(\n  url: string,\n  options: RequestInit\n): Promise<DiscordResponse> {\n  try {\n    const response = await fetch(url, options)\n\n    // Handle non-OK responses\n    if (!response.ok) {\n      let errorMessage: string\n      try {\n        const errorData = await response.json()\n        errorMessage = errorData.message || response.statusText\n      } catch {\n        errorMessage = response.statusText\n      }\n      console.error(`Discord API Error: ${response.status} - ${errorMessage}`)\n      return {\n        error: `Discord API Error: ${response.status} - ${errorMessage}`,\n      }\n    }\n\n    // Handle 204 No Content responses\n    if (response.status === 204) {\n      return { data: {} }\n    }\n\n    // Parse JSON response\n    try {\n      const data = await response.json()\n      return { data }\n    } catch (parseError) {\n      console.error('Error parsing JSON response:', parseError)\n      return { error: 'Error parsing API response' }\n    }\n  } catch (error) {\n    console.error('Network or request error:', error)\n    return { error: String(error) }\n  }\n}\n\n// Individual tool functions\nasync function sendMessage(\n  baseUrl: string,\n  headers: HeadersInit,\n  channelId: string,\n  content: string\n): Promise<DiscordResponse> {\n  const data = { content }\n  return makeRequest(`${baseUrl}/channels/${channelId}/messages`, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(data),\n  })\n}\n\nasync function getChannelInfo(\n  baseUrl: string,\n  headers: HeadersInit,\n  channelId: string\n): Promise<DiscordResponse> {\n  return makeRequest(`${baseUrl}/channels/${channelId}`, {\n    method: 'GET',\n    headers,\n  })\n}\n\nasync function listChannels(\n  baseUrl: string,\n  headers: HeadersInit,\n  guildId: string\n): Promise<DiscordResponse> {\n  return makeRequest(`${baseUrl}/guilds/${guildId}/channels`, {\n    method: 'GET',\n    headers,\n  })\n}\n\nasync function getChannelMessages(\n  baseUrl: string,\n  headers: HeadersInit,\n  channelId: string,\n  limit = 100\n): Promise<DiscordResponse> {\n  return makeRequest(\n    `${baseUrl}/channels/${channelId}/messages?limit=${limit}`,\n    {\n      method: 'GET',\n      headers,\n    }\n  )\n}\n\nasync function deleteMessage(\n  baseUrl: string,\n  headers: HeadersInit,\n  channelId: string,\n  messageId: string\n): Promise<DiscordResponse> {\n  return makeRequest(`${baseUrl}/channels/${channelId}/messages/${messageId}`, {\n    method: 'DELETE',\n    headers,\n  })\n}\n\n// Main Discord tools factory function\nexport const discordTools = (\n  { token }: { token: string },\n  config?: {\n    excludeTools?: DiscordTools[]\n  }\n): Partial<Record<DiscordTools, Tool>> => {\n  const baseUrl = 'https://discord.com/api/v10'\n  const headers = {\n    Authorization: `Bot ${token}`,\n    'Content-Type': 'application/json',\n  }\n\n  const tools: Partial<Record<DiscordTools, Tool>> = {\n    sendMessage: tool({\n      description: 'Send a message to a Discord channel',\n      parameters: z.object({\n        channelId: z\n          .string()\n          .describe('The ID of the channel to send the message to'),\n        content: z\n          .string()\n          .describe('The message content to send, supports Discord markdown'),\n      }),\n      execute: async ({ channelId, content }) => {\n        const result = await sendMessage(baseUrl, headers, channelId, content)\n        if (result.error) {\n          return `Error sending message: ${result.error}`\n        }\n        return `Message sent successfully to channel ${channelId}`\n      },\n    }),\n\n    getChannelMessages: tool({\n      description: 'Get message history from a Discord channel',\n      parameters: z.object({\n        channelId: z\n          .string()\n          .describe('The ID of the channel to fetch messages from'),\n        limit: z\n          .number()\n          .optional()\n          .describe('Maximum number of messages to retrieve (default: 100)'),\n      }),\n      execute: async ({ channelId, limit }) => {\n        const result = await getChannelMessages(\n          baseUrl,\n          headers,\n          channelId,\n          limit\n        )\n        if (result.error) {\n          return `Error getting messages: ${result.error}`\n        }\n        return JSON.stringify(result.data, null, 2)\n      },\n    }),\n\n    getChannelInfo: tool({\n      description: 'Get information about a Discord channel',\n      parameters: z.object({\n        channelId: z\n          .string()\n          .describe('The ID of the channel to get information about'),\n      }),\n      execute: async ({ channelId }) => {\n        const result = await getChannelInfo(baseUrl, headers, channelId)\n        if (result.error) {\n          return `Error getting channel info: ${result.error}`\n        }\n        return JSON.stringify(result.data, null, 2)\n      },\n    }),\n\n    listChannels: tool({\n      description: 'List all channels in a Discord server (guild)',\n      parameters: z.object({\n        guildId: z\n          .string()\n          .describe('The ID of the server (guild) to list channels from'),\n      }),\n      execute: async ({ guildId }) => {\n        const result = await listChannels(baseUrl, headers, guildId)\n        if (result.error) {\n          return `Error listing channels: ${result.error}`\n        }\n        return JSON.stringify(result.data, null, 2)\n      },\n    }),\n\n    deleteMessage: tool({\n      description: 'Delete a message from a Discord channel',\n      parameters: z.object({\n        channelId: z\n          .string()\n          .describe('The ID of the channel containing the message'),\n        messageId: z.string().describe('The ID of the message to delete'),\n      }),\n      execute: async ({ channelId, messageId }) => {\n        const result = await deleteMessage(\n          baseUrl,\n          headers,\n          channelId,\n          messageId\n        )\n        if (result.error) {\n          return `Error deleting message: ${result.error}`\n        }\n        return `Message ${messageId} deleted successfully from channel ${channelId}`\n      },\n    }),\n  }\n\n  for (const toolName in tools) {\n    if (config?.excludeTools?.includes(toolName as DiscordTools)) {\n      delete tools[toolName as DiscordTools]\n    }\n  }\n\n  return tools\n}\n",
      "target": ""
    }
  ]
}