{
  "author": "https://nicolasmontone.com",
  "name": "fal",
  "type": "registry:lib",
  "description": "Fal.ai image generation tools",
  "dependencies": [
    "zod",
    "ai",
    "@ai-sdk/fal"
  ],
  "files": [
    {
      "path": "lib/tools/fal.ts",
      "type": "registry:lib",
      "content": "import { createFal } from '@ai-sdk/fal'\nimport {\n  experimental_generateImage as generateImage,\n  tool,\n  type Tool,\n} from 'ai'\nimport { z } from 'zod'\n\nexport type FalTools = 'createImage'\n\nconst models = [\n  'fal-ai/aura-flow',\n  'fal-ai/aura-sr',\n  'fal-ai/bria/eraser',\n  'fal-ai/bria/product-shot',\n  'fal-ai/bria/text-to-image/base',\n  'fal-ai/bria/text-to-image/fast',\n  'fal-ai/bria/text-to-image/hd',\n  'fal-ai/bria/text-to-image/turbo',\n  'fal-ai/ccsr',\n  'fal-ai/clarity-upscaler',\n  'fal-ai/creative-upscaler',\n  'fal-ai/esrgan',\n  'fal-ai/flux-general',\n  'fal-ai/flux-general/differential-diffusion',\n  'fal-ai/flux-general/image-to-image',\n  'fal-ai/flux-general/inpainting',\n  'fal-ai/flux-general/rf-inversion',\n  'fal-ai/flux-lora',\n  'fal-ai/flux-lora/image-to-image',\n  'fal-ai/flux-lora/inpainting',\n  'fal-ai/flux-pro/v1.1',\n  'fal-ai/flux-pro/v1.1-ultra',\n  'fal-ai/flux-pro/v1.1-ultra-finetuned',\n  'fal-ai/flux-pro/v1.1-ultra/redux',\n  'fal-ai/flux-pro/v1.1/redux',\n  'fal-ai/flux/dev',\n  'fal-ai/flux/dev/image-to-image',\n  'fal-ai/flux/dev/redux',\n  'fal-ai/flux/schnell',\n  'fal-ai/flux/schnell/redux',\n  'fal-ai/hyper-sdxl',\n  'fal-ai/ideogram/v2',\n  'fal-ai/ideogram/v2/remix',\n  'fal-ai/ideogram/v2/turbo',\n  'fal-ai/ideogram/v2/turbo/edit',\n  'fal-ai/ideogram/v2/turbo/remix',\n  'fal-ai/janus',\n  'fal-ai/luma-photon',\n  'fal-ai/luma-photon/flash',\n  'fal-ai/omnigen-v1',\n  'fal-ai/playground-v25',\n  'fal-ai/recraft-20b',\n  'fal-ai/recraft-v3',\n  'fal-ai/sana',\n  'fal-ai/stable-cascade',\n  'fal-ai/stable-diffusion-3.5-large',\n  'fal-ai/stable-diffusion-3.5-medium',\n  'fashn/tryon',\n] as const\n\ntype FalModel = (typeof models)[number] | (string & {})\n\nexport const falTools = (\n  { apiKey, model }: { apiKey: string; model?: FalModel },\n  config?: {\n    excludeTools?: FalTools[]\n  }\n): Partial<Record<FalTools, Tool>> => {\n  if (\n    !models.includes((model || 'fal-ai/flux-pro/v1.1') as (typeof models)[number])\n  ) {\n    throw new Error('Invalid model')\n  }\n\n  const tools: Partial<Record<FalTools, Tool>> = {\n    createImage: tool({\n      description: 'Create an image based on the prompt',\n      parameters: z.object({\n        prompt: z.string().describe('The prompt to create an image based on'),\n      }),\n      execute: async ({ prompt }) => {\n        return await createImage(prompt, model ?? 'fal-ai/flux-pro/v1.1', apiKey)\n      },\n    }),\n  }\n\n  if (config?.excludeTools) {\n    for (const toolName in tools) {\n      if (config.excludeTools.includes(toolName as FalTools)) {\n        delete tools[toolName as FalTools]\n      }\n    }\n  }\n\n  return tools\n}\n\nasync function createImage(prompt: string, model: FalModel, apiKey: string) {\n  const fal = createFal({\n    apiKey,\n  })\n  return await generateImage({\n    model: fal.image(model),\n    prompt,\n  })\n}\n",
      "target": ""
    }
  ]
}