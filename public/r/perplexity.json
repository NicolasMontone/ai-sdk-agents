{
  "author": "https://nicolasmontone.com",
  "name": "perplexity",
  "type": "registry:lib",
  "description": "Perplexity AI integration for advanced web search and information retrieval. Features customizable model parameters, system prompts, and returns both content and citations for comprehensive results.",
  "dependencies": [
    "zod",
    "ai"
  ],
  "files": [
    {
      "path": "lib/tools/perplexity.ts",
      "type": "registry:lib",
      "content": "import { tool, type Tool } from 'ai'\nimport { z } from 'zod'\n\ntype PerplexityTools = 'search'\n\n/**\n  - sonar-reasoning-pro\t127k\tChat Completion\n  - sonar-reasoning\t127k\tChat Completion\n  - sonar-pro\t200k\tChat Completion\n  - sonar\t127k\tChat Completion\n */\ntype PerplexityModel =\n  | 'sonar-reasoning-pro'\n  | 'sonar-reasoning'\n  | 'sonar-pro'\n  | 'sonar'\n\nasync function getAnswer({\n  query,\n  apiKey,\n  model = 'sonar',\n  maxTokens = 1000,\n  systemPrompt = 'Be precise and concise.',\n  temperature = 0.2,\n  topP = 0.9,\n  frequencyPenalty = 1,\n}: {\n  query: string\n  apiKey: string\n  model?: PerplexityModel\n  maxTokens?: number\n  systemPrompt?: string\n  temperature?: number\n  topP?: number\n  frequencyPenalty?: number\n}) {\n  const response = await fetch('https://api.perplexity.ai/chat/completions', {\n    method: 'POST',\n    headers: {\n      Authorization: `Bearer ${apiKey}`,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      model,\n      messages: [\n        { role: 'system', content: systemPrompt },\n        { role: 'user', content: query },\n      ],\n      temperature,\n      top_p: topP,\n      frequency_penalty: frequencyPenalty,\n      max_tokens: maxTokens,\n    }),\n  })\n\n  const data = await response.json()\n  return {\n    content: data.choices[0].message.content,\n    citations: data.citations || []\n  }\n}\n\nexport const perplexityTools = (\n  {\n    apiKey,\n    model = 'sonar',\n    maxTokens,\n    systemPrompt,\n    temperature,\n    topP,\n    frequencyPenalty,\n  }: {\n    apiKey: string\n    model?: PerplexityModel\n    maxTokens?: number\n    systemPrompt?: string\n    temperature?: number\n    topP?: number\n    frequencyPenalty?: number\n  },\n  {\n    excludeTools,\n  }: {\n    excludeTools?: PerplexityTools[]\n  } = {}\n): Partial<Record<PerplexityTools, Tool>> => {\n  const tools: Partial<Record<PerplexityTools, Tool>> = {\n    search: tool({\n      description: 'Search the web for information',\n      parameters: z.object({\n        query: z.string().describe('The query to search for'),\n      }),\n      execute: async ({ query }) => {\n        const { content, citations } = await getAnswer({\n          query,\n          apiKey,\n          model,\n          maxTokens,\n          systemPrompt,\n          temperature,\n          topP,\n          frequencyPenalty,\n        })\n        return { content, citations }\n      },\n    }),\n  }\n\n  for (const toolName in tools) {\n    if (excludeTools?.includes(toolName as PerplexityTools)) {\n      delete tools[toolName as PerplexityTools]\n    }\n  }\n\n  return tools\n}\n",
      "target": ""
    }
  ]
}