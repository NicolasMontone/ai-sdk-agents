{
  "author": "https://nicolasmontone.com",
  "name": "math",
  "type": "registry:lib",
  "description": "Mathematical calculation tools providing essential mathematical operations including trigonometric functions, logarithms, exponentials, and basic arithmetic calculations.",
  "dependencies": [
    "zod",
    "ai"
  ],
  "files": [
    {
      "path": "lib/tools/math.ts",
      "type": "registry:lib",
      "content": "import { tool, type Tool } from 'ai'\nimport { z } from 'zod'\n\ntype CalculatorTools =\n  | 'add'\n  | 'subtract'\n  | 'multiply'\n  | 'divide'\n  | 'exponentiate'\n  | 'factorial'\n  | 'isPrime'\n  | 'squareRoot'\n  | 'sin'\n  | 'cos'\n  | 'tan'\n  | 'sqrt'\n  | 'log'\n  | 'exp'\n\nexport const calculatorTools = (config?: {\n  excludeTools?: CalculatorTools[]\n}): Partial<Record<CalculatorTools, Tool>> => {\n  const tools: Partial<Record<CalculatorTools, Tool>> = {\n    add: tool({\n      description: 'Add two numbers and return the result',\n      parameters: z.object({\n        a: z.number().describe('First number'),\n        b: z.number().describe('Second number'),\n      }),\n      execute: async ({ a, b }) => {\n        return add(a, b)\n      },\n    }),\n    subtract: tool({\n      description: 'Subtract second number from first and return the result',\n      parameters: z.object({\n        a: z.number().describe('First number'),\n        b: z.number().describe('Second number'),\n      }),\n      execute: async ({ a, b }) => {\n        return subtract(a, b)\n      },\n    }),\n    multiply: tool({\n      description: 'Multiply two numbers and return the result',\n      parameters: z.object({\n        a: z.number().describe('First number'),\n        b: z.number().describe('Second number'),\n      }),\n      execute: async ({ a, b }) => {\n        return multiply(a, b)\n      },\n    }),\n    divide: tool({\n      description: 'Divide first number by second and return the result',\n      parameters: z.object({\n        a: z.number().describe('Numerator'),\n        b: z.number().describe('Denominator'),\n      }),\n      execute: async ({ a, b }) => {\n        return divide(a, b)\n      },\n    }),\n    exponentiate: tool({\n      description: 'Raise first number to the power of the second number',\n      parameters: z.object({\n        a: z.number().describe('Base'),\n        b: z.number().describe('Exponent'),\n      }),\n      execute: async ({ a, b }) => {\n        return exponentiate(a, b)\n      },\n    }),\n    factorial: tool({\n      description: 'Calculate the factorial of a number',\n      parameters: z.object({\n        n: z.number().int().describe('Number to calculate the factorial of'),\n      }),\n      execute: async ({ n }) => {\n        return factorial(n)\n      },\n    }),\n    isPrime: tool({\n      description: 'Check if a number is prime',\n      parameters: z.object({\n        n: z.number().int().describe('Number to check if prime'),\n      }),\n      execute: async ({ n }) => {\n        return isPrime(n)\n      },\n    }),\n    squareRoot: tool({\n      description: 'Calculate the square root of a number',\n      parameters: z.object({\n        n: z.number().describe('Number to calculate the square root of'),\n      }),\n      execute: async ({ n }) => {\n        return squareRoot(n)\n      },\n    }),\n    sin: tool({\n      description: 'Calculate the sine of an angle in radians',\n      parameters: z.object({\n        n: z.number().describe('Angle in radians'),\n      }),\n      execute: async ({ n }) => {\n        return sin(n)\n      },\n    }),\n    cos: tool({\n      description: 'Calculate the cosine of an angle in radians',\n      parameters: z.object({\n        n: z.number().describe('Angle in radians'),\n      }),\n      execute: async ({ n }) => {\n        return cos(n)\n      },\n    }),\n    tan: tool({\n      description: 'Calculate the tangent of an angle in radians',\n      parameters: z.object({\n        n: z.number().describe('Angle in radians'),\n      }),\n      execute: async ({ n }) => {\n        return tan(n)\n      },\n    }),\n    sqrt: tool({\n      description: 'Calculate the square root of a number (alias for squareRoot)',\n      parameters: z.object({\n        n: z.number().describe('Number to calculate the square root of'),\n      }),\n      execute: async ({ n }) => {\n        return squareRoot(n)\n      },\n    }),\n    log: tool({\n      description: 'Calculate the natural logarithm (base e) of a number',\n      parameters: z.object({\n        n: z.number().describe('Number to calculate the logarithm of'),\n      }),\n      execute: async ({ n }) => {\n        return log(n)\n      },\n    }),\n    exp: tool({\n      description: 'Calculate e raised to the power of a number',\n      parameters: z.object({\n        n: z.number().describe('Power to raise e to'),\n      }),\n      execute: async ({ n }) => {\n        return exp(n)\n      },\n    }),\n  }\n\n  for (const toolName in tools) {\n    if (config?.excludeTools?.includes(toolName as CalculatorTools)) {\n      delete tools[toolName as CalculatorTools]\n    }\n  }\n\n  return tools\n}\n\nfunction add(a: number, b: number) {\n  return { result: a + b }\n}\n\nfunction subtract(a: number, b: number) {\n  return { result: a - b }\n}\n\nfunction multiply(a: number, b: number) {\n  return { result: a * b }\n}\n\nfunction divide(a: number, b: number) {\n  if (b === 0) {\n    return { error: 'Cannot divide by zero' }\n  }\n  try {\n    return { result: a / b }\n  } catch (error) {\n    return { error }\n  }\n}\n\nfunction exponentiate(a: number, b: number) {\n  return { result: a ** b }\n}\n\nfunction factorial(n: number) {\n  if (n < 0) {\n    return { error: 'Factorial is not defined for negative numbers' }\n  }\n  let result = 1\n  for (let i = 2; i <= n; i++) {\n    result *= i\n  }\n  return { result }\n}\n\nfunction isPrime(n: number) {\n  if (n <= 1) {\n    return { result: false }\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return { result: false }\n    }\n  }\n  return { result: true }\n}\n\nfunction squareRoot(n: number) {\n  if (n < 0) {\n    return { error: 'Square Root is not defined for negative numbers' }\n  }\n  return { result: Math.sqrt(n) }\n}\n\nfunction sin(n: number) {\n  return { result: Math.sin(n) }\n}\n\nfunction cos(n: number) {\n  return { result: Math.cos(n) }\n}\n\nfunction tan(n: number) {\n  return { result: Math.tan(n) }\n}\n\nfunction log(n: number) {\n  if (n <= 0) {\n    return { error: 'Logarithm is not defined for non-positive numbers' }\n  }\n  return { result: Math.log(n) }\n}\n\nfunction exp(n: number) {\n  return { result: Math.exp(n) }\n}\n",
      "target": ""
    }
  ]
}