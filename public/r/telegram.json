{
  "author": "https://nicolasmontone.com",
  "name": "telegram",
  "type": "registry:lib",
  "description": "Telegram integration tools",
  "dependencies": [
    "zod",
    "ai"
  ],
  "files": [
    {
      "path": "lib/tools/telegram.ts",
      "type": "registry:lib",
      "content": "import { type Tool, tool } from 'ai'\nimport { z } from 'zod'\n\nexport type TelegramTools = 'sendMessage'\n\nexport const telegramTools = (\n  { botToken, chatId }: { botToken: string; chatId: string },\n  config?: { excludeTools?: TelegramTools[] }\n): Partial<Record<TelegramTools, Tool>> => {\n  const telegramUrl = `https://api.telegram.org/bot${botToken}/sendMessage`\n\n  const tools: Partial<Record<TelegramTools, Tool>> = {\n    sendMessage: tool({\n      description: 'Send a message to a telegram chat',\n      parameters: z.object({\n        message: z.string().describe('The message to send'),\n      }),\n      execute: async ({ message }) => {\n        const response = await sendMessage(telegramUrl, chatId, message)\n\n        return response\n      },\n    }),\n  }\n\n  if (config?.excludeTools) {\n    for (const toolName in tools) {\n      if (config.excludeTools.includes(toolName as TelegramTools)) {\n        delete tools[toolName as TelegramTools]\n      }\n    }\n  }\n\n  return tools\n}\n\nasync function sendMessage(\n  telegramUrl: string,\n  chatId: string,\n  message: string\n) {\n  try {\n    const response = await fetch(telegramUrl, {\n      method: 'POST',\n      body: JSON.stringify({\n        chat_id: chatId,\n        text: message,\n      }),\n    })\n\n    if (!response.ok) {\n      return {\n        error: 'Failed to send message',\n      }\n    }\n\n    if (response.status === 200) {\n      return {\n        success: 'Message sent successfully',\n      }\n    }\n  } catch {\n    return {\n      error: 'Failed to send message',\n    }\n  }\n}\n",
      "target": ""
    }
  ]
}