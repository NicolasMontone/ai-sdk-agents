{
  "author": "https://nicolasmontone.com",
  "name": "exa-ai",
  "type": "registry:lib",
  "description": "Exa.ai search tools",
  "dependencies": [
    "zod",
    "ai",
    "exa-js"
  ],
  "files": [
    {
      "path": "lib/tools/exa-ai.ts",
      "type": "registry:lib",
      "content": "import { type Tool, tool } from 'ai'\nimport { z } from 'zod'\nimport Exa from 'exa-js'\n\nexport type ExaTools =\n  | 'searchUrls'\n  | 'searchForUrlsContent'\n  | 'searchWikipedia'\n  | 'searchReddit'\n  | 'searchNews'\n\nexport const exaTools = (\n  {\n    apiKey,\n    numResults,\n    includeDomains,\n    excludeDomains,\n    maxCharacters,\n  }: {\n    apiKey: string\n    numResults?: number\n    includeDomains?: string[]\n    excludeDomains?: string[]\n    // used for searchForUrlsContent\n    maxCharacters?: number\n  },\n  {\n    excludeTools,\n  }: {\n    excludeTools?: ExaTools[]\n  }\n): Partial<Record<ExaTools, Tool>> => {\n  const exa = new Exa(apiKey)\n\n  const tools: Partial<Record<ExaTools, Tool>> = {\n    searchUrls: tool({\n      description:\n        'Based on a query returns a list of URLs that are relevant to the query.',\n      parameters: z.object({\n        query: z.string().describe('The query to search for'),\n      }),\n      execute: async ({ query }) => {\n        const results = await performExaSearch(exa, {\n          query,\n          numResults: numResults ?? 5,\n          includeDomains,\n          excludeDomains,\n        })\n        return results\n      },\n    }),\n    searchForUrlsContent: tool({\n      description:\n        'Retrieve the contents of a list of pages given a list of URLs.',\n      parameters: z.object({\n        urls: z\n          .array(z.string().url())\n          .describe('The URLs to retrieve contents for'),\n      }),\n      execute: async ({ urls }) => {\n        const results = await exaGetContents(exa, {\n          urls,\n          maxCharacters: maxCharacters,\n        })\n        return results\n      },\n    }),\n    searchWikipedia: tool({\n      description: 'Fetch the wikipedia page for a given website URL.',\n      parameters: z.object({\n        query: z\n          .string()\n          .describe('The search term or URL to find Wikipedia information for'),\n      }),\n      execute: async ({ query }) => {\n        const result = await exaSearchWikipedia(exa, { query })\n        return result\n      },\n    }),\n    searchReddit: tool({\n      description: 'Fetch the reddit page for a given website URL.',\n      parameters: z.object({\n        query: z\n          .string()\n          .describe('The search term or URL to find Reddit information for'),\n      }),\n      execute: async ({ query }) => {\n        const result = await exaSearchReddit(exa, { query })\n        return result\n      },\n    }),\n    searchNews: tool({\n      description: 'Fetch the latest news for a given query.',\n      parameters: z.object({\n        query: z.string().describe('The query to search for'),\n      }),\n      execute: async ({ query }) => {\n        const result = await exaSearchNews(exa, { query })\n        return result\n      },\n    }),\n  }\n\n  if (excludeTools) {\n    for (const toolName in tools) {\n      if (excludeTools.includes(toolName as ExaTools)) {\n        delete tools[toolName as ExaTools]\n      }\n    }\n  }\n\n  return tools\n}\n\nasync function performExaSearch(\n  exa: Exa,\n  config: {\n    query: string\n    numResults?: number\n    includeDomains?: string[]\n    excludeDomains?: string[]\n  }\n) {\n  const { results } = await exa.search(config.query, {\n    numResults: config.numResults,\n    useAutoprompt: true,\n    includeDomains: config.includeDomains,\n    excludeDomains: config.excludeDomains,\n  })\n  return results\n}\n\nasync function exaGetContents(\n  exa: Exa,\n  config: {\n    urls: string[]\n    numResults?: number\n    includeDomains?: string[]\n    excludeDomains?: string[]\n    maxCharacters?: number\n  }\n) {\n  const { results } = await exa.getContents(config.urls, {\n    useAutoprompt: true,\n    includeDomains: config.includeDomains,\n    excludeDomains: config.excludeDomains,\n    maxCharacters: config.maxCharacters,\n    text: true,\n  })\n  return results\n}\n\nasync function exaSearchWikipedia(exa: Exa, { query }: { query: string }) {\n  const { results } = await exa.searchAndContents(`${query} wikipedia page:`, {\n    type: 'keyword',\n    livecrawl: 'always',\n    includeDomains: ['wikipedia.org'],\n    numResults: 1,\n    text: true,\n    includeText: [query],\n  })\n  return results\n}\n\nasync function exaSearchReddit(exa: Exa, { query }: { query: string }) {\n  const result = await exa.search(query, {\n    type: 'keyword',\n    includeDomains: ['reddit.com'],\n    includeText: [query],\n  })\n  return result.results\n}\n\nasync function exaSearchNews(exa: Exa, { query }: { query: string }) {\n  const result = await exa.searchAndContents(`[${query}] latest news:`, {\n    category: 'news',\n    type: 'keyword',\n    text: true,\n    livecrawl: 'always',\n    includeText: [query],\n    numResults: 10,\n  })\n\n  return result.results\n}\n",
      "target": ""
    }
  ]
}