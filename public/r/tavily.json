{
  "author": "https://nicolasmontone.com",
  "name": "tavily",
  "type": "registry:lib",
  "description": "Tavily search API integration offering advanced web search capabilities. Includes comprehensive search, context-aware search, Q&A functionality, and content extraction from URLs with customizable search parameters.",
  "dependencies": [
    "zod",
    "ai",
    "@tavily/core"
  ],
  "files": [
    {
      "path": "lib/tools/tavily.ts",
      "type": "registry:lib",
      "content": "import { tool, type Tool } from 'ai'\nimport { z } from 'zod'\nimport { tavily } from '@tavily/core'\n\ntype TavilyTools = 'search' | 'searchContext' | 'searchQNA' | 'extract'\n\ninterface TavilyImage {\n  url: string\n  description?: string\n}\n\ninterface TavilySearchResult {\n  title: string\n  url: string\n  content: string\n  rawContent?: string\n  score: number\n  publishedDate?: string\n}\n\ninterface TavilySearchResponse {\n  query: string\n  answer?: string\n  images?: TavilyImage[]\n  results: TavilySearchResult[]\n  responseTime: number\n  error?: string // Added to handle errors\n}\n\ninterface TavilyExtractResult {\n  url: string\n  rawContent: string\n  images?: string[]\n  error?: string\n}\n\ninterface TavilyExtractResponse {\n  results: TavilyExtractResult[]\n  error?: string\n}\n\nexport const tavilyTools = (\n  { apiKey }: { apiKey: string },\n  config?: {\n    excludeTools?: TavilyTools[]\n  }\n): Partial<Record<TavilyTools, Tool>> => {\n  const client = tavily({ apiKey })\n\n  const tools: Partial<Record<TavilyTools, Tool>> = {\n    search: tool({\n      description:\n        'Perform a comprehensive web search and get detailed results including optional images and AI-generated answers',\n      parameters: z.object({\n        query: z\n          .string()\n          .describe('The search query to find information about'),\n        searchDepth: z\n          .enum(['basic', 'advanced'])\n          .optional()\n          .describe(\n            'Depth of search - basic is faster, advanced is more thorough'\n          ),\n        topic: z\n          .enum(['general', 'news'])\n          .optional()\n          .describe(\n            'Category of search - general for broad searches, news for recent events'\n          ),\n        days: z\n          .number()\n          .optional()\n          .describe(\n            'Number of days back to search (only works with news topic, defaults to 3)'\n          ),\n        timeRange: z\n          .enum(['day', 'week', 'month', 'year', 'd', 'w', 'm', 'y'])\n          .optional()\n          .describe('Time range for results - alternative to days parameter'),\n        maxResults: z\n          .number()\n          .optional()\n          .describe('Maximum number of results to return (default: 5)'),\n        includeImages: z\n          .boolean()\n          .optional()\n          .describe('Include related images in the response'),\n        includeImageDescriptions: z\n          .boolean()\n          .optional()\n          .describe(\n            'Add descriptive text for each image (requires includeImages)'\n          ),\n        includeAnswer: z\n          .boolean()\n          .optional()\n          .describe(\n            'Include AI-generated answer to query - basic is quick, advanced is detailed'\n          ),\n        includeRawContent: z\n          .boolean()\n          .optional()\n          .describe('Include cleaned HTML content of each result'),\n        includeDomains: z\n          .array(z.string())\n          .optional()\n          .describe('List of domains to specifically include in results'),\n        excludeDomains: z\n          .array(z.string())\n          .optional()\n          .describe('List of domains to exclude from results'),\n      }),\n      execute: async ({ query, ...options }) => {\n        try {\n          return await client.search(query, {\n            ...options,\n          })\n        } catch (error) {\n          return { error: String(error) } as TavilySearchResponse\n        }\n      },\n    }),\n    searchContext: tool({\n      description:\n        'Search the web and get content and sources within a specified token limit, optimized for context retrieval',\n      parameters: z.object({\n        query: z\n          .string()\n          .describe('The search query to find information about'),\n        maxTokens: z\n          .number()\n          .optional()\n          .describe('Maximum number of tokens in the response (default: 4000)'),\n        searchDepth: z\n          .enum(['basic', 'advanced'])\n          .optional()\n          .describe(\n            'Depth of search - basic is faster, advanced is more thorough'\n          ),\n        topic: z\n          .enum(['general', 'news'])\n          .optional()\n          .describe(\n            'Category of search - general for broad searches, news for recent events'\n          ),\n        days: z\n          .number()\n          .optional()\n          .describe(\n            'Number of days back to search (only works with news topic)'\n          ),\n        maxResults: z\n          .number()\n          .optional()\n          .describe('Maximum number of results to return'),\n        includeDomains: z\n          .array(z.string())\n          .optional()\n          .describe('List of domains to specifically include in results'),\n        excludeDomains: z\n          .array(z.string())\n          .optional()\n          .describe('List of domains to exclude from results'),\n      }),\n      execute: async ({ query, ...options }) => {\n        try {\n          return await client.searchContext(query, options)\n        } catch (error) {\n          return String(error)\n        }\n      },\n    }),\n    searchQNA: tool({\n      description:\n        'Search the web and get a direct answer to your question, optimized for AI agent interactions',\n      parameters: z.object({\n        query: z.string().describe('The question to find an answer for'),\n        searchDepth: z\n          .enum(['basic', 'advanced'])\n          .optional()\n          .describe(\n            'Depth of search - defaults to advanced for better answers'\n          ),\n        topic: z\n          .enum(['general', 'news'])\n          .optional()\n          .describe(\n            'Category of search - general for broad searches, news for recent events'\n          ),\n        days: z\n          .number()\n          .optional()\n          .describe(\n            'Number of days back to search (only works with news topic)'\n          ),\n        maxResults: z\n          .number()\n          .optional()\n          .describe('Maximum number of results to consider'),\n        includeDomains: z\n          .array(z.string())\n          .optional()\n          .describe('List of domains to specifically include in results'),\n        excludeDomains: z\n          .array(z.string())\n          .optional()\n          .describe('List of domains to exclude from results'),\n      }),\n      execute: async ({ query, ...options }) => {\n        try {\n          return await client.searchQNA(query, options)\n        } catch (error) {\n          return String(error)\n        }\n      },\n    }),\n    extract: tool({\n      description: 'Extract content and optionally images from a list of URLs',\n      parameters: z.object({\n        urls: z\n          .array(z.string().url())\n          .max(20)\n          .describe('List of URLs to extract content from (maximum 20 URLs)'),\n      }),\n      execute: async ({ urls }) => {\n        try {\n          const response = await client.extract(urls)\n          return {\n            results: response.results.map((result) => ({\n              url: result.url,\n              rawContent: result.rawContent,\n            })),\n          } as TavilyExtractResponse\n        } catch (error) {\n          return {\n            results: [],\n            error: String(error),\n          } as TavilyExtractResponse\n        }\n      },\n    }),\n  }\n\n  for (const toolName in tools) {\n    if (config?.excludeTools?.includes(toolName as TavilyTools)) {\n      delete tools[toolName as TavilyTools]\n    }\n  }\n\n  return tools\n}\n",
      "target": ""
    }
  ]
}