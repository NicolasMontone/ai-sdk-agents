{
  "author": "https://nicolasmontone.com",
  "name": "giphy",
  "type": "registry:lib",
  "description": "Giphy API integration for searching and retrieving GIFs. Supports content rating filters, pagination, and sorting options for finding the perfect animated GIFs.",
  "dependencies": [
    "zod",
    "ai",
    "@giphy/js-fetch-api"
  ],
  "files": [
    {
      "path": "lib/tools/giphy.ts",
      "type": "registry:lib",
      "content": "import { tool, type Tool } from 'ai'\nimport { z } from 'zod'\nimport { GiphyFetch } from '@giphy/js-fetch-api'\n\ntype GiphyTools = 'search'\n\ntype Rating = 'pg' | 'g' | 'y' | 'pg-13' | 'r'\n/**\n * Sorting options\n */\ntype SortTypes = 'relevant' | 'recent'\n\n/**\n * Make a request to Giphy API using the official SDK\n */\n\nasync function makeRequest(\n  client: GiphyFetch,\n  params: {\n    q: string\n    limit?: number\n    offset?: number\n    rating?: Rating\n    sort?: SortTypes\n  }\n) {\n  try {\n    const result = await client.search(params.q, params)\n    return { data: result.data }\n  } catch (error) {\n    return { error: String(error) }\n  }\n}\n\n// Individual tool functions\nasync function searchGifs(\n  client: GiphyFetch,\n  query: string,\n  limit = 10,\n  offset = 0,\n  rating?: Rating,\n  sort?: SortTypes\n) {\n  return makeRequest(client, {\n    q: query,\n    limit,\n    offset,\n    rating,\n    sort,\n  })\n}\n\nexport const giphyTools = (\n  { apiKey }: { apiKey: string },\n  config?: {\n    excludeTools?: GiphyTools[]\n  }\n): Partial<Record<GiphyTools, Tool>> => {\n  if (!apiKey) {\n    throw new Error('Giphy API key is required')\n  }\n\n  const client = new GiphyFetch(apiKey)\n  const tools: Partial<Record<GiphyTools, Tool>> = {\n    search: tool({\n      description: 'Search for GIFs using keywords',\n      parameters: z.object({\n        query: z.string().describe('The search query to find GIFs'),\n        limit: z\n          .number()\n          .optional()\n          .describe('Maximum number of GIFs to return (default: 10)'),\n        offset: z\n          .number()\n          .optional()\n          .describe('Starting position of results (default: 0)'),\n        rating: z\n          .enum(['g', 'pg', 'pg-13', 'r'])\n          .optional()\n          .describe('Content rating filter'),\n        sort: z\n          .enum(['relevant', 'recent'])\n          .optional()\n          .describe('Sorting option'),\n      }),\n      execute: async ({ query, limit, offset, rating, sort }) => {\n        const result = await searchGifs(\n          client,\n          query,\n          limit,\n          offset,\n          rating,\n          sort\n        )\n        if (result.error) {\n          return `Error searching GIFs: ${result.error}`\n        }\n        return JSON.stringify(result.data, null, 2)\n      },\n    }),\n  }\n\n  // Remove excluded tools\n  for (const toolName in tools) {\n    if (config?.excludeTools?.includes(toolName as GiphyTools)) {\n      delete tools[toolName as GiphyTools]\n    }\n  }\n\n  return tools\n}\n",
      "target": ""
    }
  ]
}